{"version":3,"file":"bundle.js","mappings":"mBAEAA,OAAOC,iBAAiB,oBAAoB,MCFrC,WACH,MAAMC,EAAgBC,SAASC,cAAc,mBACzCC,EAAeF,SAASC,cAAc,kBACpCE,EAAU,CACZ,EAAK,EACL,EAAK,EACL,EAAK,GACL,EAAK,GACL,EAAK,IACL,EAAK,IACL,EAAK,KAGHC,EAAmBC,OAAOC,KAAKH,GAASI,KAAIC,GACvCA,EAAKC,gBAGVC,EAAc,IAAKL,OAAOC,KAAKH,MAAcC,EAAkB,YAAa,SAAU,YAAa,cAGzG,SAASO,EAAcC,GACnB,OAAOA,EAASC,MAAM,IAAIC,QAAO,CAACC,EAAKC,EAAMC,EAAGC,KAC5C,MAAMC,EAAahB,EAAQa,GAG3B,OAAIG,EAFYhB,EAAQe,EAAID,EAAI,IAGrBF,EAAMI,EAENJ,EAAMI,CACjB,GACD,EACP,CAEApB,EAAcD,iBAAiB,WAAW,SAAUsB,GAC3CV,EAAYW,SAASD,EAAME,MAASF,EAAMG,SAAYH,EAAMI,SAC7DJ,EAAMK,gBAEd,IAEA1B,EAAcD,iBAAiB,SAAS,KACP,IAAvBC,EAAc2B,OAChB3B,EAAc2B,MAAQ3B,EAAc2B,MAAMC,cAC1CzB,EAAa0B,UAAYjB,EAAcZ,EAAc2B,OAErDG,aAAaC,QAAQ,WAAY/B,EAAc2B,MAAMC,iBAGrDzB,EAAa0B,UAAY,EACzBC,aAAaE,WAAW,WAAYhC,EAAc2B,MAAMC,eAC5D,IAGAE,aAAaG,QAAQ,cACrBjC,EAAc2B,MAAQG,aAAaG,QAAQ,YAC3CjC,EAAc2B,MAAQ3B,EAAc2B,MAAMC,cAC1CzB,EAAa0B,UAAYjB,EAAcZ,EAAc2B,OAE7D,CDtDIO,EAAS,G","sources":["webpack://testgulp/./src/js/script.js","webpack://testgulp/./src/js/convert.js"],"sourcesContent":["import { convert } from \"./convert\";\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    convert();\n})","export function convert() {\n    const arabicInteger = document.querySelector('.arabic-integer'),\n        romanInteger = document.querySelector('.roman-integer');\n    const numbers = {\n        \"I\": 1,\n        \"V\": 5,\n        \"X\": 10,\n        \"L\": 50,\n        \"C\": 100,\n        \"D\": 500,\n        \"M\": 1000\n    }\n\n    const arabicIntMinFont = Object.keys(numbers).map(item => {\n        return item.toLowerCase();\n    });\n\n    const allowedKeys = [...(Object.keys(numbers)), ...arabicIntMinFont, 'Backspace', 'Delete', 'ArrowLeft', 'ArrowRight'];\n\n\n    function romanToArabic(romanNum) {\n        return romanNum.split('').reduce((acc, curr, i, arr) => {\n            const currentVal = numbers[curr];\n            const nextVal = numbers[arr[i + 1]];\n\n            if (currentVal < nextVal) {\n                return acc - currentVal;\n            } else {\n                return acc + currentVal;\n            }\n        }, 0);\n    }\n\n    arabicInteger.addEventListener('keydown', function (event) {\n        if (!allowedKeys.includes(event.key) && !event.ctrlKey && !event.metaKey) {\n            event.preventDefault();\n        }\n    });\n\n    arabicInteger.addEventListener('input', () => {\n        if (!(arabicInteger.value == '')) {\n            arabicInteger.value = arabicInteger.value.toUpperCase();\n            romanInteger.innerHTML = romanToArabic(arabicInteger.value);\n\n            localStorage.setItem('valueInt', arabicInteger.value.toUpperCase());\n\n        } else {\n            romanInteger.innerHTML = 0;\n            localStorage.removeItem('valueInt', arabicInteger.value.toUpperCase());\n        }\n    })\n\n    if (localStorage.getItem('valueInt')) {\n        arabicInteger.value = localStorage.getItem('valueInt');\n        arabicInteger.value = arabicInteger.value.toUpperCase();\n        romanInteger.innerHTML = romanToArabic(arabicInteger.value);\n    }\n}"],"names":["window","addEventListener","arabicInteger","document","querySelector","romanInteger","numbers","arabicIntMinFont","Object","keys","map","item","toLowerCase","allowedKeys","romanToArabic","romanNum","split","reduce","acc","curr","i","arr","currentVal","event","includes","key","ctrlKey","metaKey","preventDefault","value","toUpperCase","innerHTML","localStorage","setItem","removeItem","getItem","convert"],"sourceRoot":""}